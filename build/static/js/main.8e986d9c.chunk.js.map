{"version":3,"sources":["types/enums.ts","components/Cell.tsx","components/GameBoard.tsx","constants/index.ts","classes/Brick.ts","classes/Figure.ts","stores/index.ts","components/Home.tsx","App.tsx","index.js"],"names":["GameState","Color","FigureName","Action","Cell","brick","this","props","react_default","a","createElement","className","style","background","color","Component","observer","GameBoard","bricks","map","components_Cell","key","id","GAME_BOARD_COLUMNS","GAME_BOARD_ROWS","X_DEFAULT_OFFSET","Y_DEFAULT_OFFSET","ROTATOR","_ROTATOR","Object","defineProperty","Duck","Flug","Gun","Leg","Stick","Post","Snake","Hump","Pyramid","Nose","Table","Lover","Wall","FIGURES","x","y","Brick","index","classCallCheck","_id","_active","_position","initializerDefineProperty","_descriptor","active","_color","_ref","concat","removeRow","row","curBrick","prevBrick","setColor","setActive","_loop","values","filter","length","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","value","err","return","observable","Figure","_name","getRandomName","move","_this","rotate","nextName","offset","calcRotateOffset","xOffset","yOffset","offsetPositions","_ref2","positions","p","Math","floor","_this2","random","SPEED","KEYDOWN_DELAY","TetrisStore","_keydownSubscription","_updateSubscription","_xOffset","_yOffset","stores_descriptor","_descriptor2","_descriptor3","initKeyPressSubscriber","fromEvent","document","pipe","throttle","event","interval","subscribe","keyCode","Play","_state","initUpdateInterval","setOffset","Left","Right","Down","Rotate","rotateFigure","reset","allInactiveBricks","update","moveFigure","drawFigure","canMoveDown","setNewFigure","rotatePositions","_figure","ifRotatePositions","hasCollision","isInBoard","isPositionsInBoard","resetOffsetValues","newX","newY","offsetedPositions","position","find","isInPosition","v","_ret","nextX","nextY","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","allActiveBricks","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","b","forEach","Finish","unsubscribe","init","removeCompletedRows","_bricks","initGameBoard","allBricks","Stop","Home","store","Store","messages","components_GameBoard","state","Fragment","App","components_Home","ReactDOM","render","src_App","getElementById"],"mappings":"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","file":"static/js/main.8e986d9c.chunk.js","sourcesContent":["export enum GameState {\n  Stop = 0,\n  Play = 1,\n  Pause = 2,\n  Finish = 3\n};\n\nexport enum Color {\n  Brick = 'black',\n  Figure = 'orange'\n};\n\nexport enum FigureName {\n  Gun = 0,\n  Flug = 1,\n  Duck = 2,\n  Leg = 3,\n  Post = 4,\n  Stick = 5,\n  Snake = 6,\n  Hump = 7,\n  Wall = 8,\n  Pyramid = 9,\n  Nose = 10,\n  Table = 11,\n  Lover = 12,\n};\n\nexport enum Action {\n  Play = 13,\n  Right = 39,\n  Left = 37,\n  Down = 40,\n  Rotate = 38,\n};\n","import React, { Component } from 'react';\nimport { observer } from 'mobx-react';\nimport { TBrick } from '../types/brick';\n\ninterface IProps {\n  brick: TBrick;\n}\n\nclass Cell extends Component<IProps> {\n\n  render () {\n    const {brick} = this.props;\n\n    return (\n      <div className='brick' style={{background: brick.color}} />\n    );\n  }\n}\n\nexport default observer(Cell);\n","import React, { Component } from 'react';\nimport { observer } from 'mobx-react';\nimport Cell from './Cell';\nimport { TBrick } from '../types/brick';\n\ninterface IProps {\n  bricks: TBrick[];\n}\n\nclass GameBoard extends Component<IProps> {\n\n  render () {\n    const {bricks} = this.props;\n\n    return (\n      <div className='game-board'>\n        {bricks.map((brick) =>\n          <Cell key={brick.id} brick={brick} />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default observer(GameBoard);\n","import {FigureName} from '../types/enums';\n\nexport const GAME_BOARD_COLUMNS = 10;\nexport const GAME_BOARD_ROWS = 20;\n\nexport const BRICK_COLOR = 'black';\nexport const FIGURE_COLOR = 'orange';\n\nexport const X_DEFAULT_OFFSET = 0;\nexport const Y_DEFAULT_OFFSET = 1;\n\nexport const ROTATOR: any = {\n  [FigureName.Duck]: FigureName.Flug,\n  [FigureName.Flug]: FigureName.Gun,\n  [FigureName.Gun]: FigureName.Leg,\n  [FigureName.Leg]: FigureName.Duck,\n  [FigureName.Stick]: FigureName.Post,\n  [FigureName.Post]: FigureName.Stick,\n  [FigureName.Snake]: FigureName.Hump,\n  [FigureName.Hump]: FigureName.Snake,\n  [FigureName.Pyramid]: FigureName.Nose,\n  [FigureName.Nose]: FigureName.Table,\n  [FigureName.Table]: FigureName.Lover,\n  [FigureName.Lover]: FigureName.Pyramid,\n  [FigureName.Wall]: FigureName.Wall,\n};\n\nexport const FIGURES = [\n  [\n    {x: 0, y: 0},\n    {x: 0, y: -1},\n    {x: 1, y: -1},\n    {x: 2, y: -1},\n  ],\n  [\n    {x: 1, y: 0},\n    {x: 1, y: -1},\n    {x: 1, y: -2},\n    {x: 0, y: -2},\n  ],\n  [\n    {x: 0, y: 0},\n    {x: 1, y: 0},\n    {x: 2, y: 0},\n    {x: 2, y: -1},\n  ],\n  [\n    {x: 0, y: 0},\n    {x: 0, y: -1},\n    {x: 0, y: -2},\n    {x: 1, y: 0},\n  ],\n  [\n    {x: 0, y: 0},\n    {x: 1, y: 0},\n    {x: 2, y: 0},\n    {x: 3, y: 0}\n  ],\n  [\n    {x: 0, y: 0},\n    {x: 0, y: -1},\n    {x: 0, y: -2},\n    {x: 0, y: -3}\n  ],\n  [\n    {x: 1, y: 0},\n    {x: 2, y: 0},\n    {x: 0, y: -1},\n    {x: 1, y: -1}\n  ],\n  [\n    {x: 0, y: 0},\n    {x: 0, y: -1},\n    {x: 1, y: -1},\n    {x: 1, y: -2}\n  ],\n  [\n    {x: 0, y: 0},\n    {x: 1, y: 0},\n    {x: 0, y: -1},\n    {x: 1, y: -1}\n  ],\n  [\n    {x: 0, y: 0},\n    {x: 1, y: 0},\n    {x: 2, y: 0},\n    {x: 1, y: -1}\n  ],\n  [\n    {x: 1, y: 0},\n    {x: 1, y: -1},\n    {x: 1, y: -2},\n    {x: 0, y: -1}\n  ],\n  [\n    {x: 0, y: -1},\n    {x: 1, y: -1},\n    {x: 2, y: -1},\n    {x: 1, y: 0}\n  ],\n  [\n    {x: 0, y: 0},\n    {x: 0, y: -1},\n    {x: 0, y: -2},\n    {x: 1, y: -1}\n  ],\n]\n","import { observable } from 'mobx';\nimport { Color } from '../types/enums';\nimport { Position } from '../types/position';\nimport { TBrick } from '../types/brick';\nimport { \n  GAME_BOARD_COLUMNS, GAME_BOARD_ROWS,\n} from '../constants';\n\nclass Brick implements TBrick {\n  \n  private _id: number = 0;\n  private _active: boolean = true;\n  private _position: Position = {x: 0, y: 0};\n  \n  @observable private _color = Color.Brick;\n  \n  constructor (x: number, y: number, index: number) {\n    this._id = index;\n    this._position.x = x;\n    this._position.y = y;\n  }\n\n  get id () {\n    return this._id;\n  }\n\n  get x () {\n    return this._position.x;\n  }\n\n  get y () {\n    return this._position.y;\n  }\n\n  get color () {\n    return this._color;\n  }\n\n  get active () {\n    return this._active;\n  }\n\n  setActive (active: boolean) {\n    this._active = active;\n  }\n\n  setColor (color: Color) {\n    this._color = color;\n  }\n\n  isInPosition ({x, y}: Position) {\n    return (this._position.x === x && this._position.y === y);\n  }\n\n  static initGameBoard (bricks: {[key: string]: Brick}) {\n    let index = 0;\n\n    for (let y = 1; y < GAME_BOARD_ROWS + 1; ++y) {\n      for (let x = 1; x < GAME_BOARD_COLUMNS + 1; ++x) {\n        bricks[`${x}:${y}`] = new Brick(x, y, index++);\n      }\n    }\n  }\n\n  static removeCompletedRows (bricks: {[key: string]: Brick}) {\n\n    const removeRow = (row: number) => {\n      for (let y = row; y > 1; --y) {\n        for (let x = 1; x < GAME_BOARD_COLUMNS + 1; ++x) {\n          let curBrick: (Brick | undefined) = bricks[`${x}:${y}`];\n          let prevBrick: (Brick | undefined) = bricks[`${x}:${y - 1}`];\n\n          curBrick!.setColor(prevBrick!.color);\n          curBrick!.setActive(prevBrick!.active);\n        }\n      }\n    }\n\n    for (let y = GAME_BOARD_ROWS; y >= 1; --y) {\n      while (1) {\n        const inactiveBricks = Object.values(bricks).filter((brick: Brick) => {\n          return brick.y === y && !brick.active;\n        });\n\n        if (inactiveBricks.length < GAME_BOARD_COLUMNS) {\n          break;\n        }\n\n        removeRow(y);\n      }\n    }\n  }\n\n  static reset (bricks: Brick[]) {\n    for (let brick of bricks) {\n      brick.setActive(true);\n      brick.setColor(Color.Brick);\n    }\n  }\n}\n\nexport default Brick;\n","import { FigureName } from '../types/enums';\nimport { Position } from '../types/position';\nimport {\n  FIGURES, GAME_BOARD_COLUMNS, ROTATOR\n} from '../constants';\n\nclass Figure {\n\n  private _position: Position = {x: 5, y: 1};\n  private _name: FigureName = Figure.getRandomName();\n  \n  get x () {\n    return this._position.x;\n  }\n\n  get y () {\n    return this._position.y;\n  }\n  \n  get positions () {\n    return FIGURES[this._name];\n  }\n\n  get ifRotatePositions () {\n    const nextName = ROTATOR[this._name];\n    const positions = FIGURES[nextName];\n\n    const offset = Figure.calcRotateOffset(nextName);\n\n    return positions.map((p: Position) => {\n      return {\n        x: p.x + this.x + offset.xOffset,\n        y: p.y + this.y + offset.yOffset\n      };\n    });\n  }\n\n  init () {\n    this._name = Figure.getRandomName();\n    this._position.x = Math.floor((GAME_BOARD_COLUMNS / 2));\n    this._position.y = 0;\n  }\n\n  move = ({x, y}: Position) => {\n    this._position.x = x;\n    this._position.y = y;\n  }\n  \n  rotate = () => {\n    const nextName: FigureName = ROTATOR[this._name];\n\n    if (nextName !== undefined) {\n      const offset = Figure.calcRotateOffset(nextName);\n\n      this._position.x += offset.xOffset;\n      this._position.y += offset.yOffset;\n\n      this._name = nextName;\n    }\n  }\n\n  offsetPositions = ({x, y}: Position) => {\n    return this.positions.map((p: Position) => {\n      return {\n        x: p.x + x,\n        y: p.y + y\n      };\n    });\n  }\n  \n  static getRandomName (): FigureName {\n    return Math.floor(Math.random() * FIGURES.length);\n  }\n\n  static calcRotateOffset (nextName: FigureName): {xOffset: number, yOffset: number} {\n    let xOffset = 0, yOffset = 0;\n\n    if (nextName === FigureName.Stick) {\n      xOffset += 1;\n      yOffset += 2;\n    }\n    \n    if (nextName === FigureName.Post) {\n      xOffset -= 1;\n      yOffset -= 2;\n    }\n\n    return {xOffset, yOffset};\n  }\n}\n\nexport default Figure;\n","import { observable } from 'mobx';\nimport { fromEvent, interval } from 'rxjs';\nimport { throttle } from 'rxjs/operators';\nimport { GameState, Action, Color } from '../types/enums';\nimport { Position } from '../types/position';\nimport Brick from '../classes/Brick';\nimport Figure from '../classes/Figure';\nimport {\n  GAME_BOARD_ROWS, GAME_BOARD_COLUMNS,\n  X_DEFAULT_OFFSET, Y_DEFAULT_OFFSET\n} from '../constants';\n\nconst SPEED: number = 300;\nconst KEYDOWN_DELAY: number = 200;\n\nexport default class TetrisStore {\n\n  private _keydownSubscription: any;\n  private _updateSubscription: any;\n\n  private _xOffset: number = X_DEFAULT_OFFSET;\n  private _yOffset: number = Y_DEFAULT_OFFSET;\n\n  @observable private _state: GameState = GameState.Stop;\n  @observable private _bricks: {[key: string]: Brick} = {};\n  @observable private _figure: Figure = new Figure();\n\n  constructor() {\n    Brick.initGameBoard(this._bricks);\n\n    this.initKeyPressSubscriber();\n  }\n\n  get state () {\n    return this._state;\n  }\n\n  get allBricks () {\n    return Object.values(this._bricks);\n  }\n\n  get allActiveBricks () {\n    return this.allBricks.filter((b: Brick) => b.active);\n  }\n\n  get allInactiveBricks () {\n    return this.allBricks.filter((b: Brick) => !b.active);\n  }\n\n  initKeyPressSubscriber = () => {\n    this._keydownSubscription = fromEvent(document, 'keydown')\n      .pipe(throttle((event: any) => interval(KEYDOWN_DELAY)))\n      .subscribe((event: any) => {\n        if (event.keyCode === Action.Play && this._state !== GameState.Play) {\n          this.initUpdateInterval();\n        } else {\n          this.setOffset(event.keyCode);\n        }\n      });\n  }\n\n  setOffset = (keyCode: Action) => {\n    switch (keyCode) {\n      case Action.Left:\n        this._xOffset = -1;\n        this._yOffset = 0;\n        break;\n      case Action.Right:\n        this._xOffset = 1;\n        this._yOffset = 0;\n        break;\n      case Action.Down:\n        this._yOffset = 2;\n        break;\n      case Action.Rotate:\n        this._xOffset = 0;\n        this._yOffset = 0;\n        this.rotateFigure();\n        break;\n    }\n  }\n\n  initUpdateInterval = () => {\n    this._state = GameState.Play;\n\n    Brick.reset(this.allInactiveBricks);\n\n    this._updateSubscription = interval(SPEED)\n      .subscribe(() => this.update());\n  }\n\n  update = () => {\n    this.moveFigure();\n    this.drawFigure();\n\n    if (!this.canMoveDown()) {\n      this.setNewFigure();\n    }\n  }\n\n  rotateFigure = () => {\n    const rotatePositions = this._figure.ifRotatePositions;\n\n    const hasCollision = this.hasCollision({x: this._figure.x, y: this._figure.y}, rotatePositions);\n    const isInBoard = this.isPositionsInBoard(rotatePositions);\n    \n    if (!hasCollision && isInBoard) {\n      this._figure.rotate();\n    }\n\n    this.resetOffsetValues();\n  }\n\n  moveFigure = () => {\n    const newX = this._figure.x + this._xOffset;\n    const newY = this._figure.y + this._yOffset;\n\n    const offsetedPositions = this._figure.offsetPositions({x: newX, y: newY});\n\n    const hasCollision = this.hasCollision({x: newX, y: newY}, offsetedPositions);\n    const isInBoard = this.isPositionsInBoard(offsetedPositions);\n    \n    if (!hasCollision && isInBoard) {\n      this._figure.move({x: newX, y: newY});\n    }\n\n    this.resetOffsetValues();\n  }\n\n  hasCollision = (position: Position, positions: any) => {\n    for (let brick of this.allInactiveBricks) {\n        const collision = positions.find((position: any) => brick.isInPosition(position));\n\n        if (collision) {\n          return true;\n        }\n    }\n\n    return false;\n  }\n\n  isPositionsInBoard = (positions: Position[]) => {\n    const isPositionOutside = (p: Position) => {\n      if (p.x < 1 || p.x > GAME_BOARD_COLUMNS) {\n        return true;\n      }\n      \n      return p.y > GAME_BOARD_ROWS;\n    };\n    \n    if (positions.find(isPositionOutside)) {\n      return false;\n    }\n\n    return true;\n  }\n\n  canMoveDown = () => {\n    const nextX = this._figure.x;\n    const nextY = this._figure.y + Y_DEFAULT_OFFSET;\n\n    if (nextY > GAME_BOARD_ROWS) {\n      return false;\n    }\n\n    const offsetedPositions = this._figure.offsetPositions({x: nextX, y: nextY});\n    \n    if (this.hasCollision({x: nextX, y: nextY}, offsetedPositions)) {\n      return false;\n    }\n\n    return true;\n  }\n\n  resetOffsetValues = () => {\n    this._xOffset = X_DEFAULT_OFFSET;\n    this._yOffset = Y_DEFAULT_OFFSET;\n  }\n\n  drawFigure = () => {\n    for (let brick of this.allActiveBricks) {\n      brick.setColor(Color.Brick);\n      \n      for (let position of this._figure.positions) {\n        if (brick.isInPosition({\n          x: position.x + this._figure.x, \n          y: position.y + this._figure.y\n        })) {\n          brick.setColor(Color.Figure);\n        } \n      }\n    }\n  }\n\n  setNewFigure = () => {\n    this.allActiveBricks\n      .filter((b: Brick) => b.color === Color.Figure)\n      .forEach((b: Brick) => b.setActive(false));\n    \n    if (this._figure.y <= 1) {\n      this._state = GameState.Finish;\n      this._updateSubscription.unsubscribe();\n    } else {\n      this._figure.init();\n    }\n\n    Brick.removeCompletedRows(this._bricks);\n  }\n}\n","import React, { Component } from 'react';\nimport { observer } from 'mobx-react';\nimport GameBoard from './GameBoard';\nimport Store from '../stores';\nimport { GameState } from '../types/enums';\n\nclass Home extends Component<{}> {\n  store = new Store();\n\n  messages = {\n    [GameState.Stop]: 'Press Enter to start the game',\n    [GameState.Finish]: 'Game over'\n  } as {[key: string]: string};\n\n  render () {\n    return (\n      <div className='container'>\n        <GameBoard bricks={this.store.allBricks} />\n        <div className='title'>\n          <h1>TETRIS</h1>\n\n          <div className='message'>\n            {this.messages[this.store.state] || ''}\n          </div>\n\n          <div className='instruction'>\n            {this.store.state === GameState.Stop &&\n              <React.Fragment>\n                <div className='button'>Left</div>\n                <div>\n                  <div className='button'>Up</div>\n                  <div className='button'>Down</div>\n                </div>\n                <div className='button'>Right</div>\n              </React.Fragment>\n            }\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default observer(Home);\n","import React from 'react';\nimport Home from './components/Home';\nimport './App.css';\n\nfunction App() {\n  return (\n    <Home />\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}